/*
 * This file is generated by jOOQ.
 */
package com.epita.assistants.ddl.tables;


import com.epita.assistants.ddl.Indexes;
import com.epita.assistants.ddl.Keys;
import com.epita.assistants.ddl.Webservice;
import com.epita.assistants.ddl.tables.records.ZoneRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Zone extends TableImpl<ZoneRecord> {

    private static final long serialVersionUID = 1986579827;

    /**
     * The reference instance of <code>WEBSERVICE.ZONE</code>
     */
    public static final Zone ZONE = new Zone();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ZoneRecord> getRecordType() {
        return ZoneRecord.class;
    }

    /**
     * The column <code>WEBSERVICE.ZONE.NAME</code>.
     */
    public final TableField<ZoneRecord, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * Create a <code>WEBSERVICE.ZONE</code> table reference
     */
    public Zone() {
        this(DSL.name("ZONE"), null);
    }

    /**
     * Create an aliased <code>WEBSERVICE.ZONE</code> table reference
     */
    public Zone(String alias) {
        this(DSL.name(alias), ZONE);
    }

    /**
     * Create an aliased <code>WEBSERVICE.ZONE</code> table reference
     */
    public Zone(Name alias) {
        this(alias, ZONE);
    }

    private Zone(Name alias, Table<ZoneRecord> aliased) {
        this(alias, aliased, null);
    }

    private Zone(Name alias, Table<ZoneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Zone(Table<O> child, ForeignKey<O, ZoneRecord> key) {
        super(child, key, ZONE);
    }

    @Override
    public Schema getSchema() {
        return Webservice.WEBSERVICE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_2A);
    }

    @Override
    public UniqueKey<ZoneRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2A;
    }

    @Override
    public List<UniqueKey<ZoneRecord>> getKeys() {
        return Arrays.<UniqueKey<ZoneRecord>>asList(Keys.CONSTRAINT_2A);
    }

    @Override
    public Zone as(String alias) {
        return new Zone(DSL.name(alias), this);
    }

    @Override
    public Zone as(Name alias) {
        return new Zone(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Zone rename(String name) {
        return new Zone(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Zone rename(Name name) {
        return new Zone(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
