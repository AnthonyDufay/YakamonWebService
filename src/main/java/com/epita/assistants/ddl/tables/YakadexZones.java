/*
 * This file is generated by jOOQ.
 */
package com.epita.assistants.ddl.tables;


import com.epita.assistants.ddl.Indexes;
import com.epita.assistants.ddl.Keys;
import com.epita.assistants.ddl.Webservice;
import com.epita.assistants.ddl.tables.records.YakadexZonesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class YakadexZones extends TableImpl<YakadexZonesRecord> {

    private static final long serialVersionUID = 103870199;

    /**
     * The reference instance of <code>WEBSERVICE.YAKADEX_ZONES</code>
     */
    public static final YakadexZones YAKADEX_ZONES = new YakadexZones();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<YakadexZonesRecord> getRecordType() {
        return YakadexZonesRecord.class;
    }

    /**
     * The column <code>WEBSERVICE.YAKADEX_ZONES.ID</code>.
     */
    public final TableField<YakadexZonesRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>WEBSERVICE.YAKADEX_ZONES.YAKADEX_ID</code>.
     */
    public final TableField<YakadexZonesRecord, String> YAKADEX_ID = createField(DSL.name("YAKADEX_ID"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>WEBSERVICE.YAKADEX_ZONES.ZONE_ID</code>.
     */
    public final TableField<YakadexZonesRecord, String> ZONE_ID = createField(DSL.name("ZONE_ID"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * Create a <code>WEBSERVICE.YAKADEX_ZONES</code> table reference
     */
    public YakadexZones() {
        this(DSL.name("YAKADEX_ZONES"), null);
    }

    /**
     * Create an aliased <code>WEBSERVICE.YAKADEX_ZONES</code> table reference
     */
    public YakadexZones(String alias) {
        this(DSL.name(alias), YAKADEX_ZONES);
    }

    /**
     * Create an aliased <code>WEBSERVICE.YAKADEX_ZONES</code> table reference
     */
    public YakadexZones(Name alias) {
        this(alias, YAKADEX_ZONES);
    }

    private YakadexZones(Name alias, Table<YakadexZonesRecord> aliased) {
        this(alias, aliased, null);
    }

    private YakadexZones(Name alias, Table<YakadexZonesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> YakadexZones(Table<O> child, ForeignKey<O, YakadexZonesRecord> key) {
        super(child, key, YAKADEX_ZONES);
    }

    @Override
    public Schema getSchema() {
        return Webservice.WEBSERVICE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_BD, Indexes.CONSTRAINT_INDEX_BD8, Indexes.PRIMARY_KEY_BD, Indexes.UC_YAKADEX_ZONES_INDEX_B);
    }

    @Override
    public UniqueKey<YakadexZonesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_BD;
    }

    @Override
    public List<UniqueKey<YakadexZonesRecord>> getKeys() {
        return Arrays.<UniqueKey<YakadexZonesRecord>>asList(Keys.CONSTRAINT_BD, Keys.UC_YAKADEX_ZONES);
    }

    @Override
    public List<ForeignKey<YakadexZonesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<YakadexZonesRecord, ?>>asList(Keys.CONSTRAINT_BD8, Keys.CONSTRAINT_BD87);
    }

    public Yakadex yakadex() {
        return new Yakadex(this, Keys.CONSTRAINT_BD8);
    }

    public Zone zone() {
        return new Zone(this, Keys.CONSTRAINT_BD87);
    }

    @Override
    public YakadexZones as(String alias) {
        return new YakadexZones(DSL.name(alias), this);
    }

    @Override
    public YakadexZones as(Name alias) {
        return new YakadexZones(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public YakadexZones rename(String name) {
        return new YakadexZones(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public YakadexZones rename(Name name) {
        return new YakadexZones(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
