/*
 * This file is generated by jOOQ.
 */
package com.epita.assistants.ddl.tables.records;


import com.epita.assistants.ddl.tables.Trainer;

import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TrainerRecord extends UpdatableRecordImpl<TrainerRecord> implements Record2<UUID, String> {

    private static final long serialVersionUID = 464189105;

    /**
     * Setter for <code>WEBSERVICE.TRAINER.UUID</code>.
     */
    public void setUuid(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>WEBSERVICE.TRAINER.UUID</code>.
     */
    public UUID getUuid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>WEBSERVICE.TRAINER.NAME</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>WEBSERVICE.TRAINER.NAME</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Trainer.TRAINER.UUID;
    }

    @Override
    public Field<String> field2() {
        return Trainer.TRAINER.NAME;
    }

    @Override
    public UUID component1() {
        return getUuid();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public UUID value1() {
        return getUuid();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public TrainerRecord value1(UUID value) {
        setUuid(value);
        return this;
    }

    @Override
    public TrainerRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public TrainerRecord values(UUID value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TrainerRecord
     */
    public TrainerRecord() {
        super(Trainer.TRAINER);
    }

    /**
     * Create a detached, initialised TrainerRecord
     */
    public TrainerRecord(UUID uuid, String name) {
        super(Trainer.TRAINER);

        set(0, uuid);
        set(1, name);
    }
}
