/*
 * This file is generated by jOOQ.
 */
package com.epita.assistants.ddl.tables;


import com.epita.assistants.ddl.Indexes;
import com.epita.assistants.ddl.Keys;
import com.epita.assistants.ddl.Webservice;
import com.epita.assistants.ddl.tables.records.MoveRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Move extends TableImpl<MoveRecord> {

    private static final long serialVersionUID = -765544018;

    /**
     * The reference instance of <code>WEBSERVICE.MOVE</code>
     */
    public static final Move MOVE = new Move();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MoveRecord> getRecordType() {
        return MoveRecord.class;
    }

    /**
     * The column <code>WEBSERVICE.MOVE.NAME</code>.
     */
    public final TableField<MoveRecord, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * Create a <code>WEBSERVICE.MOVE</code> table reference
     */
    public Move() {
        this(DSL.name("MOVE"), null);
    }

    /**
     * Create an aliased <code>WEBSERVICE.MOVE</code> table reference
     */
    public Move(String alias) {
        this(DSL.name(alias), MOVE);
    }

    /**
     * Create an aliased <code>WEBSERVICE.MOVE</code> table reference
     */
    public Move(Name alias) {
        this(alias, MOVE);
    }

    private Move(Name alias, Table<MoveRecord> aliased) {
        this(alias, aliased, null);
    }

    private Move(Name alias, Table<MoveRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Move(Table<O> child, ForeignKey<O, MoveRecord> key) {
        super(child, key, MOVE);
    }

    @Override
    public Schema getSchema() {
        return Webservice.WEBSERVICE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_24);
    }

    @Override
    public UniqueKey<MoveRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_24;
    }

    @Override
    public List<UniqueKey<MoveRecord>> getKeys() {
        return Arrays.<UniqueKey<MoveRecord>>asList(Keys.CONSTRAINT_24);
    }

    @Override
    public Move as(String alias) {
        return new Move(DSL.name(alias), this);
    }

    @Override
    public Move as(Name alias) {
        return new Move(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Move rename(String name) {
        return new Move(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Move rename(Name name) {
        return new Move(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
