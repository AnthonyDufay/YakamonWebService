/*
 * This file is generated by jOOQ.
 */
package com.epita.assistants.ddl.tables.records;


import com.epita.assistants.ddl.tables.TrainerYakamon;

import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TrainerYakamonRecord extends UpdatableRecordImpl<TrainerYakamonRecord> implements Record3<Integer, UUID, UUID> {

    private static final long serialVersionUID = 420067289;

    /**
     * Setter for <code>WEBSERVICE.TRAINER_YAKAMON.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>WEBSERVICE.TRAINER_YAKAMON.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>WEBSERVICE.TRAINER_YAKAMON.TRAINER_ID</code>.
     */
    public void setTrainerId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>WEBSERVICE.TRAINER_YAKAMON.TRAINER_ID</code>.
     */
    public UUID getTrainerId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>WEBSERVICE.TRAINER_YAKAMON.YAKAMON_ID</code>.
     */
    public void setYakamonId(UUID value) {
        set(2, value);
    }

    /**
     * Getter for <code>WEBSERVICE.TRAINER_YAKAMON.YAKAMON_ID</code>.
     */
    public UUID getYakamonId() {
        return (UUID) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, UUID, UUID> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return TrainerYakamon.TRAINER_YAKAMON.ID;
    }

    @Override
    public Field<UUID> field2() {
        return TrainerYakamon.TRAINER_YAKAMON.TRAINER_ID;
    }

    @Override
    public Field<UUID> field3() {
        return TrainerYakamon.TRAINER_YAKAMON.YAKAMON_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getTrainerId();
    }

    @Override
    public UUID component3() {
        return getYakamonId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getTrainerId();
    }

    @Override
    public UUID value3() {
        return getYakamonId();
    }

    @Override
    public TrainerYakamonRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TrainerYakamonRecord value2(UUID value) {
        setTrainerId(value);
        return this;
    }

    @Override
    public TrainerYakamonRecord value3(UUID value) {
        setYakamonId(value);
        return this;
    }

    @Override
    public TrainerYakamonRecord values(Integer value1, UUID value2, UUID value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TrainerYakamonRecord
     */
    public TrainerYakamonRecord() {
        super(TrainerYakamon.TRAINER_YAKAMON);
    }

    /**
     * Create a detached, initialised TrainerYakamonRecord
     */
    public TrainerYakamonRecord(Integer id, UUID trainerId, UUID yakamonId) {
        super(TrainerYakamon.TRAINER_YAKAMON);

        set(0, id);
        set(1, trainerId);
        set(2, yakamonId);
    }
}
