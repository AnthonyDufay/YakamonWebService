/*
 * This file is generated by jOOQ.
 */
package com.epita.assistants.ddl.tables;


import com.epita.assistants.ddl.Indexes;
import com.epita.assistants.ddl.Keys;
import com.epita.assistants.ddl.Webservice;
import com.epita.assistants.ddl.tables.records.YakamonZoneRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class YakamonZone extends TableImpl<YakamonZoneRecord> {

    private static final long serialVersionUID = -1920911796;

    /**
     * The reference instance of <code>WEBSERVICE.YAKAMON_ZONE</code>
     */
    public static final YakamonZone YAKAMON_ZONE = new YakamonZone();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<YakamonZoneRecord> getRecordType() {
        return YakamonZoneRecord.class;
    }

    /**
     * The column <code>WEBSERVICE.YAKAMON_ZONE.ID</code>.
     */
    public final TableField<YakamonZoneRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>WEBSERVICE.YAKAMON_ZONE.YAKAMON_ID</code>.
     */
    public final TableField<YakamonZoneRecord, UUID> YAKAMON_ID = createField(DSL.name("YAKAMON_ID"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>WEBSERVICE.YAKAMON_ZONE.ZONE_ID</code>.
     */
    public final TableField<YakamonZoneRecord, String> ZONE_ID = createField(DSL.name("ZONE_ID"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * Create a <code>WEBSERVICE.YAKAMON_ZONE</code> table reference
     */
    public YakamonZone() {
        this(DSL.name("YAKAMON_ZONE"), null);
    }

    /**
     * Create an aliased <code>WEBSERVICE.YAKAMON_ZONE</code> table reference
     */
    public YakamonZone(String alias) {
        this(DSL.name(alias), YAKAMON_ZONE);
    }

    /**
     * Create an aliased <code>WEBSERVICE.YAKAMON_ZONE</code> table reference
     */
    public YakamonZone(Name alias) {
        this(alias, YAKAMON_ZONE);
    }

    private YakamonZone(Name alias, Table<YakamonZoneRecord> aliased) {
        this(alias, aliased, null);
    }

    private YakamonZone(Name alias, Table<YakamonZoneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> YakamonZone(Table<O> child, ForeignKey<O, YakamonZoneRecord> key) {
        super(child, key, YAKAMON_ZONE);
    }

    @Override
    public Schema getSchema() {
        return Webservice.WEBSERVICE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_C, Indexes.CONSTRAINT_INDEX_CD, Indexes.CONSTRAINT_INDEX_CDF, Indexes.PRIMARY_KEY_C);
    }

    @Override
    public Identity<YakamonZoneRecord, Integer> getIdentity() {
        return Keys.IDENTITY_YAKAMON_ZONE;
    }

    @Override
    public UniqueKey<YakamonZoneRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_C;
    }

    @Override
    public List<UniqueKey<YakamonZoneRecord>> getKeys() {
        return Arrays.<UniqueKey<YakamonZoneRecord>>asList(Keys.CONSTRAINT_C, Keys.CONSTRAINT_CDFD);
    }

    @Override
    public List<ForeignKey<YakamonZoneRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<YakamonZoneRecord, ?>>asList(Keys.CONSTRAINT_CD, Keys.CONSTRAINT_CDF);
    }

    public Yakamon yakamon() {
        return new Yakamon(this, Keys.CONSTRAINT_CD);
    }

    public Zone zone() {
        return new Zone(this, Keys.CONSTRAINT_CDF);
    }

    @Override
    public YakamonZone as(String alias) {
        return new YakamonZone(DSL.name(alias), this);
    }

    @Override
    public YakamonZone as(Name alias) {
        return new YakamonZone(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public YakamonZone rename(String name) {
        return new YakamonZone(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public YakamonZone rename(Name name) {
        return new YakamonZone(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, UUID, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
