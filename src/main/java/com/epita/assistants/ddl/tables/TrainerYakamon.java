/*
 * This file is generated by jOOQ.
 */
package com.epita.assistants.ddl.tables;


import com.epita.assistants.ddl.Indexes;
import com.epita.assistants.ddl.Keys;
import com.epita.assistants.ddl.Webservice;
import com.epita.assistants.ddl.tables.records.TrainerYakamonRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TrainerYakamon extends TableImpl<TrainerYakamonRecord> {

    private static final long serialVersionUID = 85622572;

    /**
     * The reference instance of <code>WEBSERVICE.TRAINER_YAKAMON</code>
     */
    public static final TrainerYakamon TRAINER_YAKAMON = new TrainerYakamon();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrainerYakamonRecord> getRecordType() {
        return TrainerYakamonRecord.class;
    }

    /**
     * The column <code>WEBSERVICE.TRAINER_YAKAMON.ID</code>.
     */
    public final TableField<TrainerYakamonRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>WEBSERVICE.TRAINER_YAKAMON.TRAINER_ID</code>.
     */
    public final TableField<TrainerYakamonRecord, UUID> TRAINER_ID = createField(DSL.name("TRAINER_ID"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>WEBSERVICE.TRAINER_YAKAMON.YAKAMON_ID</code>.
     */
    public final TableField<TrainerYakamonRecord, UUID> YAKAMON_ID = createField(DSL.name("YAKAMON_ID"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>WEBSERVICE.TRAINER_YAKAMON</code> table reference
     */
    public TrainerYakamon() {
        this(DSL.name("TRAINER_YAKAMON"), null);
    }

    /**
     * Create an aliased <code>WEBSERVICE.TRAINER_YAKAMON</code> table reference
     */
    public TrainerYakamon(String alias) {
        this(DSL.name(alias), TRAINER_YAKAMON);
    }

    /**
     * Create an aliased <code>WEBSERVICE.TRAINER_YAKAMON</code> table reference
     */
    public TrainerYakamon(Name alias) {
        this(alias, TRAINER_YAKAMON);
    }

    private TrainerYakamon(Name alias, Table<TrainerYakamonRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrainerYakamon(Name alias, Table<TrainerYakamonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TrainerYakamon(Table<O> child, ForeignKey<O, TrainerYakamonRecord> key) {
        super(child, key, TRAINER_YAKAMON);
    }

    @Override
    public Schema getSchema() {
        return Webservice.WEBSERVICE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_A, Indexes.CONSTRAINT_INDEX_AD, Indexes.CONSTRAINT_INDEX_AD2, Indexes.PRIMARY_KEY_A);
    }

    @Override
    public Identity<TrainerYakamonRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TRAINER_YAKAMON;
    }

    @Override
    public UniqueKey<TrainerYakamonRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_A;
    }

    @Override
    public List<UniqueKey<TrainerYakamonRecord>> getKeys() {
        return Arrays.<UniqueKey<TrainerYakamonRecord>>asList(Keys.CONSTRAINT_A, Keys.CONSTRAINT_AD20);
    }

    @Override
    public List<ForeignKey<TrainerYakamonRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TrainerYakamonRecord, ?>>asList(Keys.CONSTRAINT_AD2, Keys.CONSTRAINT_AD);
    }

    public Trainer trainer() {
        return new Trainer(this, Keys.CONSTRAINT_AD2);
    }

    public Yakamon yakamon() {
        return new Yakamon(this, Keys.CONSTRAINT_AD);
    }

    @Override
    public TrainerYakamon as(String alias) {
        return new TrainerYakamon(DSL.name(alias), this);
    }

    @Override
    public TrainerYakamon as(Name alias) {
        return new TrainerYakamon(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainerYakamon rename(String name) {
        return new TrainerYakamon(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainerYakamon rename(Name name) {
        return new TrainerYakamon(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
