/*
 * This file is generated by jOOQ.
 */
package com.epita.assistants.ddl.tables.records;


import com.epita.assistants.ddl.tables.Yakadex;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class YakadexRecord extends UpdatableRecordImpl<YakadexRecord> implements Record3<String, String, String> {

    private static final long serialVersionUID = -1281511662;

    /**
     * Setter for <code>WEBSERVICE.YAKADEX.NAME</code>.
     */
    public void setName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>WEBSERVICE.YAKADEX.NAME</code>.
     */
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>WEBSERVICE.YAKADEX.PREVIOUS_EVOLUTION</code>.
     */
    public void setPreviousEvolution(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>WEBSERVICE.YAKADEX.PREVIOUS_EVOLUTION</code>.
     */
    public String getPreviousEvolution() {
        return (String) get(1);
    }

    /**
     * Setter for <code>WEBSERVICE.YAKADEX.NEXT_EVOLUTION</code>.
     */
    public void setNextEvolution(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>WEBSERVICE.YAKADEX.NEXT_EVOLUTION</code>.
     */
    public String getNextEvolution() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Yakadex.YAKADEX.NAME;
    }

    @Override
    public Field<String> field2() {
        return Yakadex.YAKADEX.PREVIOUS_EVOLUTION;
    }

    @Override
    public Field<String> field3() {
        return Yakadex.YAKADEX.NEXT_EVOLUTION;
    }

    @Override
    public String component1() {
        return getName();
    }

    @Override
    public String component2() {
        return getPreviousEvolution();
    }

    @Override
    public String component3() {
        return getNextEvolution();
    }

    @Override
    public String value1() {
        return getName();
    }

    @Override
    public String value2() {
        return getPreviousEvolution();
    }

    @Override
    public String value3() {
        return getNextEvolution();
    }

    @Override
    public YakadexRecord value1(String value) {
        setName(value);
        return this;
    }

    @Override
    public YakadexRecord value2(String value) {
        setPreviousEvolution(value);
        return this;
    }

    @Override
    public YakadexRecord value3(String value) {
        setNextEvolution(value);
        return this;
    }

    @Override
    public YakadexRecord values(String value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached YakadexRecord
     */
    public YakadexRecord() {
        super(Yakadex.YAKADEX);
    }

    /**
     * Create a detached, initialised YakadexRecord
     */
    public YakadexRecord(String name, String previousEvolution, String nextEvolution) {
        super(Yakadex.YAKADEX);

        set(0, name);
        set(1, previousEvolution);
        set(2, nextEvolution);
    }
}
