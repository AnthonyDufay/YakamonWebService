/*
 * This file is generated by jOOQ.
 */
package com.epita.assistants.ddl.tables;


import com.epita.assistants.ddl.Indexes;
import com.epita.assistants.ddl.Keys;
import com.epita.assistants.ddl.Webservice;
import com.epita.assistants.ddl.tables.records.YakadexRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Yakadex extends TableImpl<YakadexRecord> {

    private static final long serialVersionUID = 1903406102;

    /**
     * The reference instance of <code>WEBSERVICE.YAKADEX</code>
     */
    public static final Yakadex YAKADEX = new Yakadex();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<YakadexRecord> getRecordType() {
        return YakadexRecord.class;
    }

    /**
     * The column <code>WEBSERVICE.YAKADEX.NAME</code>.
     */
    public final TableField<YakadexRecord, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>WEBSERVICE.YAKADEX.PREVIOUS_EVOLUTION</code>.
     */
    public final TableField<YakadexRecord, String> PREVIOUS_EVOLUTION = createField(DSL.name("PREVIOUS_EVOLUTION"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>WEBSERVICE.YAKADEX.NEXT_EVOLUTION</code>.
     */
    public final TableField<YakadexRecord, String> NEXT_EVOLUTION = createField(DSL.name("NEXT_EVOLUTION"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * Create a <code>WEBSERVICE.YAKADEX</code> table reference
     */
    public Yakadex() {
        this(DSL.name("YAKADEX"), null);
    }

    /**
     * Create an aliased <code>WEBSERVICE.YAKADEX</code> table reference
     */
    public Yakadex(String alias) {
        this(DSL.name(alias), YAKADEX);
    }

    /**
     * Create an aliased <code>WEBSERVICE.YAKADEX</code> table reference
     */
    public Yakadex(Name alias) {
        this(alias, YAKADEX);
    }

    private Yakadex(Name alias, Table<YakadexRecord> aliased) {
        this(alias, aliased, null);
    }

    private Yakadex(Name alias, Table<YakadexRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Yakadex(Table<O> child, ForeignKey<O, YakadexRecord> key) {
        super(child, key, YAKADEX);
    }

    @Override
    public Schema getSchema() {
        return Webservice.WEBSERVICE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_D, Indexes.CONSTRAINT_INDEX_D7, Indexes.PRIMARY_KEY_D);
    }

    @Override
    public UniqueKey<YakadexRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    @Override
    public List<UniqueKey<YakadexRecord>> getKeys() {
        return Arrays.<UniqueKey<YakadexRecord>>asList(Keys.CONSTRAINT_D);
    }

    @Override
    public List<ForeignKey<YakadexRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<YakadexRecord, ?>>asList(Keys.CONSTRAINT_D7, Keys.CONSTRAINT_D73);
    }

    public com.epita.assistants.ddl.tables.Yakadex constraintD7() {
        return new com.epita.assistants.ddl.tables.Yakadex(this, Keys.CONSTRAINT_D7);
    }

    public com.epita.assistants.ddl.tables.Yakadex constraintD73() {
        return new com.epita.assistants.ddl.tables.Yakadex(this, Keys.CONSTRAINT_D73);
    }

    @Override
    public Yakadex as(String alias) {
        return new Yakadex(DSL.name(alias), this);
    }

    @Override
    public Yakadex as(Name alias) {
        return new Yakadex(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Yakadex rename(String name) {
        return new Yakadex(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Yakadex rename(Name name) {
        return new Yakadex(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
